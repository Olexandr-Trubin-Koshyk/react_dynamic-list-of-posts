{"version":3,"sources":["components/PostsList/PostsList.tsx","api/api.ts","api/comments.ts","api/posts.ts","components/NewCommentForm/NewCommentForm.tsx","components/PostDetails/PostDetails.tsx","App.tsx","index.tsx"],"names":["PostsList","React","memo","posts","selectPost","selectedPostId","className","map","post","userId","title","type","id","onClick","BASE_URL","POSTS","COMMENTS","deleteComment","commentId","fetch","method","then","response","json","getPosts","NewCommentForm","newComment","useState","name","setName","email","setEmail","comment","setComment","onSubmit","event","preventDefault","placeholder","value","onChange","target","PostDetails","comments","setComments","selectedPost","setSelectedPost","isCommentsVisible","setIsCommentsVisible","getSelectedPost","postId","data","getComments","useEffect","length","commentForDelete","filteredComments","filter","commentDeleter","body","prev","uuidv4","App","setPosts","users","setUsers","setSelectedPostId","showUsers","showPosts","defaultValue","Number","disabled","user","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.fecff284.chunk.js","sourcesContent":["import React from 'react';\nimport { Post } from '../../types';\nimport './PostsList.scss';\n\ntype Props = {\n  posts: Post[];\n  selectPost: (postId: number) => void;\n  selectedPostId: number;\n};\n\nexport const PostsList: React.FC<Props> = React.memo(({\n  posts, selectPost, selectedPostId,\n}) => {\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n\n      <ul className=\"PostsList__list\">\n        {posts.map((post: Post) => (\n          <li key={post.id} className=\"PostsList__item\">\n            <div>\n              <b>{`[User #${post.userId}]: `}</b>\n              {post.title}\n            </div>\n            <button\n              type=\"button\"\n              className={`PostsList__button button ${\n                selectedPostId === post.id\n                  ? 'PostsList__button--is-active'\n                  : ''\n              }`}\n              onClick={() => (\n                selectedPostId === post.id\n                  ? selectPost(0)\n                  : selectPost(post.id)\n              )}\n            >\n              {selectedPostId === post.id\n                ? 'Close'\n                : 'Open'}\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n});\n","import { Post } from '../types';\n\nexport const BASE_URL = 'https://mate.academy/students-api';\n\nexport const POSTS = '/posts';\nexport const COMMENTS = '/comments';\nconst USERS = '/users';\n\nexport function getAllPosts(): Promise<Post[]> {\n  return fetch(`${BASE_URL}${POSTS}`).then(response => response.json());\n}\n\nexport function getAllComments(): Promise<Comment[]> {\n  return fetch(`${BASE_URL}${COMMENTS}`).then(response => response.json());\n}\n\nexport const getAllUsers = () => {\n  return fetch(BASE_URL + USERS).then(response => response.json());\n};\n","import { BASE_URL, COMMENTS } from './api';\n\nexport const getPostComments = (postId: number) => {\n  return fetch(`${BASE_URL}${COMMENTS}?postId=${postId}`)\n    .then(response => response.json());\n};\n\nexport const deleteComment = (commentId: number) => {\n  return fetch(`${BASE_URL}${COMMENTS}/${commentId}`, { method: 'DELETE' })\n    .then(response => response.json());\n};\n","import { Post } from '../types';\nimport { BASE_URL, getAllPosts, POSTS } from './api';\n\nexport function getPosts(userId?: number): Promise<Post[]> {\n  if (!userId) {\n    return getAllPosts();\n  }\n\n  return fetch(`${BASE_URL}${POSTS}?userId=${userId}`)\n    .then(response => response.json());\n}\n\nexport function getPostById(postId: number): Promise<Post> {\n  return fetch(`${BASE_URL}${POSTS}/${postId}`)\n    .then(response => response.json());\n}\n","import React, { memo, useState } from 'react';\nimport './NewCommentForm.scss';\n\ntype Props = {\n  newComment: (\n    name: string,\n    email: string,\n    comment: string\n  ) => void;\n};\n\nexport const NewCommentForm: React.FC<Props> = memo(({ newComment }) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [comment, setComment] = useState('');\n\n  const resetForm = () => {\n    setName('');\n    setEmail('');\n    setComment('');\n  };\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    newComment(name, email, comment);\n\n    resetForm();\n  };\n\n  return (\n    <form className=\"NewCommentForm\" onSubmit={handleSubmit}>\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          value={name}\n          onChange={(event) => (setName(event.target.value))}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          value={email}\n          onChange={(event) => (setEmail(event.target.value))}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          value={comment}\n          onChange={(event) => (setComment(event.target.value))}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n});\n","import React, { memo, useEffect, useState } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport { deleteComment, getPostComments } from '../../api/comments';\nimport { getPostById } from '../../api/posts';\nimport { Post, Comment } from '../../types';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\n\ninterface Props {\n  selectedPostId: number;\n}\n\nexport const PostDetails: React.FC<Props> = memo(({\n  selectedPostId,\n}) => {\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n  const [isCommentsVisible, setIsCommentsVisible] = useState(true);\n\n  const getSelectedPost = () => (\n    getPostById(selectedPostId).then(data => setSelectedPost(data))\n  );\n\n  const getComments = () => {\n    getPostComments(selectedPostId)\n      .then(comment => setComments(comment));\n  };\n\n  const changeCommentsVisibility = () => (\n    setIsCommentsVisible(!isCommentsVisible)\n  );\n\n  const commentDeleter = (commentId = 0) => {\n    deleteComment(commentId)\n      .then(commentForDelete => {\n        if (commentForDelete) {\n          const filteredComments = comments.filter(\n            comment => comment.id !== commentId,\n          );\n\n          setComments(filteredComments);\n        }\n      });\n  };\n\n  const newComment = (\n    name: string,\n    email: string,\n    body: string,\n  ) => {\n    setComments((prev) => (\n      [...prev,\n        {\n          id: +uuidv4(),\n          postId: selectedPostId,\n          name,\n          email,\n          body,\n        }]\n    ));\n  };\n\n  useEffect(() => {\n    getSelectedPost();\n    getComments();\n  }, [selectedPostId]);\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      <section className=\"PostDetails__post\">\n        <p>{selectedPost?.title}</p>\n      </section>\n\n      <section className=\"PostDetails__comments\">\n        {comments.length\n          ? (\n            <button\n              type=\"button\"\n              className=\"button\"\n              onClick={changeCommentsVisibility}\n            >\n              {\n                isCommentsVisible\n                  ? `Hide ${comments?.length} comments`\n                  : `Show ${comments?.length} comments`\n              }\n            </button>\n          )\n          : (\n            <p>No comments yet</p>\n          )}\n\n        {\n          !isCommentsVisible\n            ? ''\n            : (\n              <ul className=\"PostDetails__list\">\n                {comments.map((comment) => (\n                  <li className=\"PostDetails__list-item\" key={comment.id}>\n                    <button\n                      type=\"button\"\n                      className=\"PostDetails__remove-button button\"\n                      onClick={() => commentDeleter(comment.id)}\n                    >\n                      X\n                    </button>\n                    <p>{comment.body}</p>\n                  </li>\n                ))}\n              </ul>\n            )\n        }\n      </section>\n\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm newComment={newComment} />\n        </div>\n      </section>\n    </div>\n  );\n});\n","import React, { useEffect, useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { Post, User } from './types';\nimport { getAllUsers } from './api/api';\nimport { getPosts } from './api/posts';\n\nconst App: React.FC = () => {\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [users, setUsers] = useState<User[]>([]);\n  const [selectedPostId, setSelectedPostId] = useState(0);\n\n  const showUsers = () => (\n    getAllUsers().then(data => (\n      setUsers(data)\n    ))\n  );\n\n  const showPosts = (userId?: number) => (\n    getPosts(userId).then(data => (\n      setPosts(data)\n    ))\n  );\n\n  const selectPost = (postId: number) => {\n    setSelectedPostId(postId);\n  };\n\n  useEffect(() => {\n    showPosts();\n    showUsers();\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            defaultValue=\"0\"\n            onChange={(event) => {\n              showPosts(Number(event.target.value));\n            }}\n          >\n            <option value=\"0\" disabled>\n              All users\n            </option>\n            {users.map(user => (\n              <option value={user.id} key={user.id}>\n                {user.name}\n              </option>\n            ))}\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            posts={posts}\n            selectPost={selectPost}\n            selectedPostId={selectedPostId}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          {selectedPostId\n            ? (\n              <PostDetails selectedPostId={selectedPostId} />\n            )\n            : (\n              <p>No post selected</p>\n            )}\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}